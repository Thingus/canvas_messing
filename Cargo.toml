cargo-features = ["profile-rustflags"]

[package]
name = "canvas_exploration"
version = "0.1.0"
authors = ["Thingus <john@johnrprogramming.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = { version = "*"}
getrandom = { version = "*", features = ["wasm_js"]} 
js-sys = { version = "*"}

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }
rand = "0.9.1"

[dependencies.web-sys]
version = "0.3.4"
features = [
  'console',
  'Document',
  'Element',
  'HtmlElement',
  'HtmlCanvasElement',
  'CanvasRenderingContext2d',
  'ImageData'
]

[dev-dependencies]
wasm-bindgen-test = "0.3.34"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

# We want to explictly use the wasm_js RNG
rustflags = ['--cfg','getrandom_backend="wasm_js"']

[profile.dev]
rustflags = ['--cfg','getrandom_backend="wasm_js"']
